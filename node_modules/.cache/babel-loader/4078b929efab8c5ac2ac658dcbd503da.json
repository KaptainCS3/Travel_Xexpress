{"ast":null,"code":"var _jsxFileName = \"/home/kaptaincs3/Documents/react-tms/src/component/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport memesObject from \"../memesData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  //map and return meme object url\n  const memeObjectUrl = memesObject.data.memes.map(items => {\n    return items.url;\n  }); // generate random index to access meme data object url\n\n  const randomIndex = Math.floor(Math.random() * memeObjectUrl.length - 1) + 1;\n  const url = memeObjectUrl[randomIndex];\n  console.log(url); //create a meme state variable to store current meme display image\n\n  const [meme, setMeme] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"https://i.imgflip.com/2d3al6.jpg\"\n  });\n  setMeme(prevMemeImage => {\n    return { ...prevMemeImage // randomImage\n\n    };\n  });\n  const [allMemeImage, setAllMemeImage] = useState(memesObject); //function to fetch random image from meme data object\n\n  function fetchMemeImage() {\n    setAllMemeImage(prevImage => {});\n  }\n\n  const [memeImage, setMemeImage] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"https://i.imgflip.com/2d3al6.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = useState(memesObject);\n\n  function genImgUrl() {\n    const memeImg = allMemeImages.data.memes.map(items => {\n      return items.url;\n    });\n    const memeImgIndex = Math.floor(Math.random() * memeImg.length - 1) + 1;\n    const url = memeImg[memeImgIndex];\n    setMemeImage(prevMemeData => ({ ...prevMemeData,\n      randomImage: url\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"meme-gen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Top text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Bottom text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"get-meme\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: genImgUrl,\n            children: \"Get a new meme image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-img\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: memeImage.randomImage,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"P7w9DoqidC/5zUMk9045ZusyG3E=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","memesObject","Main","memeObjectUrl","data","memes","map","items","url","randomIndex","Math","floor","random","length","console","log","meme","setMeme","topText","bottomText","randomImage","prevMemeImage","allMemeImage","setAllMemeImage","fetchMemeImage","prevImage","memeImage","setMemeImage","allMemeImages","setAllMemeImages","genImgUrl","memeImg","memeImgIndex","prevMemeData"],"sources":["/home/kaptaincs3/Documents/react-tms/src/component/Main.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport memesObject from \"../memesData\";\nconst Main = () => {\n  //map and return meme object url\n\n  const memeObjectUrl = memesObject.data.memes.map((items) => {\n    return items.url;\n  });\n  // generate random index to access meme data object url\n\n  const randomIndex = Math.floor(Math.random() * memeObjectUrl.length - 1) + 1;\n\n  const url = memeObjectUrl[randomIndex];\n  console.log(url);\n\n  //create a meme state variable to store current meme display image\n\n  const [meme, setMeme] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"https://i.imgflip.com/2d3al6.jpg\",\n  });\n  setMeme((prevMemeImage) => {\n    return {\n      ...prevMemeImage,\n      // randomImage\n    };\n  });\n\n  const [allMemeImage, setAllMemeImage] = useState(memesObject);\n\n  //function to fetch random image from meme data object\n\n  function fetchMemeImage() {\n    setAllMemeImage((prevImage) => {});\n  }\n\n  const [memeImage, setMemeImage] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"https://i.imgflip.com/2d3al6.jpg\",\n  });\n  const [allMemeImages, setAllMemeImages] = useState(memesObject);\n  function genImgUrl() {\n    const memeImg = allMemeImages.data.memes.map((items) => {\n      return items.url;\n    });\n    const memeImgIndex = Math.floor(Math.random() * memeImg.length - 1) + 1;\n    const url = memeImg[memeImgIndex];\n    setMemeImage((prevMemeData) => ({\n      ...prevMemeData,\n      randomImage: url,\n    }));\n  }\n  return (\n    <main>\n      <section className=\"meme-gen\">\n        <div className=\"meme-container\">\n          <div className=\"inputs\">\n            <input type=\"text\" placeholder=\"Top text\" />\n            <input type=\"text\" placeholder=\"Bottom text\" />\n          </div>\n          <div className=\"get-meme\">\n            <button onClick={genImgUrl}>Get a new meme image</button>\n          </div>\n        </div>\n        <div className=\"meme-img\">\n          <img src={memeImage.randomImage} alt=\"\" />\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}